//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ReplicationService.Configuration
{
    
    
    /// <summary>
    /// The ReplicationServiceConfiguration Configuration Section.
    /// </summary>
    public partial class ReplicationServiceConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the ReplicationServiceConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ReplicationServiceConfigurationSectionName = "replicationService";
        
        /// <summary>
        /// Gets the ReplicationServiceConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::ReplicationService.Configuration.ReplicationServiceConfiguration Instance
        {
            get
            {
                return ((global::ReplicationService.Configuration.ReplicationServiceConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::ReplicationService.Configuration.ReplicationServiceConfiguration.ReplicationServiceConfigurationSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.ReplicationServiceConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SliceSize Property
        /// <summary>
        /// The XML name of the <see cref="SliceSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SliceSizePropertyName = "sliceSize";
        
        /// <summary>
        /// Gets or sets the SliceSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SliceSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.ReplicationServiceConfiguration.SliceSizePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int SliceSize
        {
            get
            {
                return ((int)(base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.SliceSizePropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.SliceSizePropertyName] = value;
            }
        }
        #endregion
        
        #region Interval Property
        /// <summary>
        /// The XML name of the <see cref="Interval"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string IntervalPropertyName = "interval";
        
        /// <summary>
        /// Gets or sets the Interval.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Interval.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.ReplicationServiceConfiguration.IntervalPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false, DefaultValue="00:15:00")]
        public virtual global::System.TimeSpan Interval
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.IntervalPropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.IntervalPropertyName] = value;
            }
        }
        #endregion
        
        #region SourceEventStore Property
        /// <summary>
        /// The XML name of the <see cref="SourceEventStore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SourceEventStorePropertyName = "sourceEventStore";
        
        /// <summary>
        /// Gets or sets the SourceEventStore.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SourceEventStore.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.ReplicationServiceConfiguration.SourceEventStorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ReplicationService.Configuration.EventStoreElement SourceEventStore
        {
            get
            {
                return ((global::ReplicationService.Configuration.EventStoreElement)(base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.SourceEventStorePropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.SourceEventStorePropertyName] = value;
            }
        }
        #endregion
        
        #region TargetEventStore Property
        /// <summary>
        /// The XML name of the <see cref="TargetEventStore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TargetEventStorePropertyName = "targetEventStore";
        
        /// <summary>
        /// Gets or sets the TargetEventStore.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TargetEventStore.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.ReplicationServiceConfiguration.TargetEventStorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::ReplicationService.Configuration.EventStoreElement TargetEventStore
        {
            get
            {
                return ((global::ReplicationService.Configuration.EventStoreElement)(base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.TargetEventStorePropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.ReplicationServiceConfiguration.TargetEventStorePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace ReplicationService.Configuration
{
    
    
    /// <summary>
    /// The EventStoreElement Configuration Element.
    /// </summary>
    public partial class EventStoreElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.EventStoreElement.HostPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::ReplicationService.Configuration.EventStoreElement.HostPropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.EventStoreElement.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region TcpPort Property
        /// <summary>
        /// The XML name of the <see cref="TcpPort"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string TcpPortPropertyName = "tcpPort";
        
        /// <summary>
        /// Gets or sets the TcpPort.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The TcpPort.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::ReplicationService.Configuration.EventStoreElement.TcpPortPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual int TcpPort
        {
            get
            {
                return ((int)(base[global::ReplicationService.Configuration.EventStoreElement.TcpPortPropertyName]));
            }
            set
            {
                base[global::ReplicationService.Configuration.EventStoreElement.TcpPortPropertyName] = value;
            }
        }
        #endregion
    }
}
